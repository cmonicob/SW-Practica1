from django.http import HttpResponse, Http404, HttpResponseRedirect
from django.template import Context
from django.template.loader import get_template
from django.contrib.auth.models import User
from django.shortcuts import render_to_response, get_object_or_404	
from iconcessionaris.models import *
from django.contrib.auth import logout
from django.core.urlresolvers import reverse, reverse_lazy
from django.views.generic import ListView, UpdateView, DetailView 
from django.views.generic.edit import DeleteView, CreateView
from forms import *	
from django.utils.decorators import method_decorator
from django.contrib.auth.decorators import login_required

def user_logout(request):
    logout(request)
    return HttpResponseRedirect('/')

class LoginRequiredMixin(object):
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(LoginRequiredMixin, self).dispatch(*args, **kwargs)

class CheckIsOwnerMixin(object):
    def get_object(self, *args, **kwargs):
        obj = super(CheckIsOwnerMixin, self).get_object(*args, **kwargs)
        if not obj.user == self.request.user:
            raise PermissionDenied
        return obj

def mainpage(request):
	return render_to_response(
		'mainpage.html',
		{
			'titlehead': 'Concessionaris APP',
			'pagetitle': 'Benvingut a l\'aplicacio per gestionar els concessionaris',
			'user': request.user
		})
		
class clientListPage (ListView):
    model = User
    template_name = 'clientListPage.html'

class clientDetail (DetailView):
    model = User
    template_name = 'clientInfoPage.html'

class clientOrderPage (ListView):
    model = Compra
    template_name= 'clientOrderPage.html'
    def get_queryset(self):
        return Compra.objects.filter(user=self.kwargs['pk'])


class clientCreate(CreateView):
    model = User
    template_name = 'form.html'
    form_class = ClientForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(clientCreate, self).form_valid(form)

class clientEdit(UpdateView):
    model = User
    template_name = 'form.html'
    form_class = ClientForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(clientEdit, self).form_valid(form)


class clientDelete(DeleteView):
    model = User
    template_name = 'delete.html'
    success_url = reverse_lazy('client_list')

class carDealersListPage (ListView):
    model = Concessionari
    template_name = 'carDealersListPage.html'

class carDealersInfoPage (DetailView):
    model = Concessionari
    template_name = 'carDealersInfoPage.html'

class carDealersOrdersListPage (ListView):
    model = Compra
    template_name = 'carDealersOrderPage.html'
    def get_queryset(self):
        return Compra.objects.filter(cardealer=self.kwargs['pk'])

class carDealersCreate(CreateView):
    model = Concessionari
    template_name = 'form.html'
    form_class = CarDealerForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(carDealersCreate, self).form_valid(form)

#@login_required(login_url='/login')
class carDealersDelete(DeleteView):
    model = Concessionari
    template_name = 'delete.html'
    success_url = reverse_lazy('carDealer_list')

class carDealersEdit(UpdateView):
    model = Concessionari
    template_name = 'form.html'
    form_class = CarDealerForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(carDealersEdit, self).form_valid(form)

class ordersCreate(CreateView):
    model = Compra
    template_name = 'form.html'
    form_class = OrderForm
    success_url = reverse_lazy('client_list')
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(ordersCreate, self).form_valid(form)


class brandsListPage(ListView):
    model = Marca
    template_name = 'brandsListPage.html'

class brandsDetail(DetailView):
    model = Marca
    template_name = 'brandsInfoPage.html'

#@login_required()
class brandsDelete(DeleteView):
    model = Marca
    template_name = 'delete.html'
    success_url = reverse_lazy('brand_list')

class brandsCreate(CreateView):
    model = Marca
    template_name = 'form.html'
    form_class = BrandForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(brandsCreate, self).form_valid(form)

class brandsEdit(UpdateView):
    model = Marca
    template_name = 'form.html'
    form_class = BrandForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(brandsEdit, self).form_valid(form)

class ordersDetail (DetailView):
    model = Compra
    template_name = 'orderInfoPage.html'

class ordersDelete(DeleteView):
    model = Compra
    template_name = 'delete.html'
    success_url = reverse_lazy('orders_list')

class ordersEdit(UpdateView):
    model = Compra
    template_name = 'form.html'
    form_class = OrderForm
    def form_valid(self, form):
        form.instance.user = self.request.user
        return super(ordersEdit, self).form_valid(form)

def templateFormat(request, page):
	formatt = request.GET.get('format')
	if formatt == 'xml':
		return get_template("xml/"+page+'.xml'),"text/xml"
	if formatt == 'json':
		return get_template("json/"+page+'.json'),"application/json"
	else :
		return get_template(page+'.html'),""
